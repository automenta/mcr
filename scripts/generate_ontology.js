// scripts/generate_ontology.js
const fs = require('fs');
const path = require('path');
const yargs = require('yargs/yargs');
const { hideBin } = require('yargs/helpers');
const { prompts, fillTemplate } = require('../src/prompts');
const logger = require('../src/logger');
const { generateContent, commonYargsOptions } = require('./_generatorUtils');

// Ensure the ontologies directory exists
const ontologiesDir = path.join(__dirname, '..', 'ontologies');
if (!fs.existsSync(ontologiesDir)) {
  fs.mkdirSync(ontologiesDir, { recursive: true });
}

async function createOntology(domain, instructions, llmProviderName, modelName) {
  logger.info(
    `Creating ontology for domain: "${domain}" with instructions: "${instructions}" using ${llmProviderName}`
  );

  if (!prompts.GENERATE_ONTOLOGY) {
    logger.error('GENERATE_ONTOLOGY prompt is not defined in prompts.js.');
    throw new Error('GENERATE_ONTOLOGY prompt is not defined.');
  }

  const filledUserPrompt = fillTemplate(prompts.GENERATE_ONTOLOGY.user, {
    domain,
    instructions,
  });
  const systemPrompt = prompts.GENERATE_ONTOLOGY.system;

  const generatedProlog = await generateContent({
    promptName: 'GENERATE_ONTOLOGY',
    systemPrompt,
    userPrompt: filledUserPrompt,
    llmProviderName,
    modelName,
  });

  let cleanedProlog = generatedProlog.replace(/```prolog\s*([\s\S]*?)\s*```/g, '$1');
  cleanedProlog = cleanedProlog.replace(/```\s*([\s\S]*?)\s*```/g, '$1');
  cleanedProlog = cleanedProlog.trim();

  if (!cleanedProlog) {
    logger.warn('LLM generated empty Prolog content.');
    return;
  }

  const commentHeader = `% Generated by scripts/generate_ontology.js for domain: ${domain}\n% Instructions: ${instructions}\n\n`;
  cleanedProlog = commentHeader + cleanedProlog;

  const fileName = `${domain.replace(/\s+/g, '_').toLowerCase()}GeneratedOntology.pl`;
  const filePath = path.join(ontologiesDir, fileName);

  fs.writeFileSync(filePath, cleanedProlog);
  logger.info(`Successfully generated ontology and saved to ${filePath}`);
}

if (require.main === module) {
  const argv = yargs(hideBin(process.argv))
    .option('domain', {
      alias: 'd',
      type: 'string',
      description: 'The domain for which to generate the ontology (e.g., "biology", "space_exploration")',
      demandOption: true,
    })
    .option('instructions', {
      alias: 'i',
      type: 'string',
      description: 'Specific instructions for the content, source material, or style of the ontology',
      demandOption: true,
    })
    .options(commonYargsOptions) // Add common provider and model options
    .help().argv;

  createOntology(argv.domain, argv.instructions, argv.provider, argv.model)
    .catch((error) => {
      logger.error(`An error occurred in generate_ontology.js: ${error.message}`);
      process.exit(1);
    });
}
